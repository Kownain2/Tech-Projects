# -*- coding: utf-8 -*-
"""Copy of Group_5_Energy_Data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1azgq-uApapw4Q_Uf0pQCX0p14is7G4zb
"""

#importing libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

#importing dataset
filepath='//content/World_Energy_By_Country_And_Region_1965_to_2023.csv'
df = pd.read_csv(filepath)

#performing exploratory analysis
df.info()

df.head(9)

df.tail(9)

#drop empty rows
df.dropna(inplace=True)



#check if empty rows are deleted
df.head(9)

df.tail(9)

df.shape

#checking for missing values
df.isnull().sum()

#check for duplicate values
df.duplicated().sum()

#Data Exploration

df.describe()

df['2023'] = pd.to_numeric(df['2023'], errors='coerce')

#Histogram

import matplotlib.pyplot as plt
plt.figure(figsize=(20, 6))  # Adjust figure size as needed
plt.hist(df['2023'], bins=20, edgecolor='black')
plt.xlabel('Energy Consumption in 2023')
plt.ylabel('Frequency')
plt.title('Distribution of Energy Consumption in 2023')
plt.show()

# box plot
sns.boxplot(x=df['2023'])
plt.show()

df['2019'] = pd.to_numeric(df['2019'], errors='coerce')
df['2020'] = pd.to_numeric(df['2020'], errors='coerce')
df['2021'] = pd.to_numeric(df['2021'], errors='coerce')
df['2022'] = pd.to_numeric(df['2022'], errors='coerce')

#Line chart for average energy consumption for last five years from 2019 to 2023

# Extract data for years 2019 to 2023
years = ['2019', '2020', '2021', '2022', '2023']
energy_consumption = df[years].mean()

# Create line chart
plt.figure(figsize=(10, 6))
plt.plot(years, energy_consumption, marker='o')
plt.xlabel('Year')
plt.ylabel('Average Energy Consumption')
plt.title('Average Energy Consumption from 2019 to 2023')
plt.grid(True)
plt.show()

"""from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()
df[year_columns] = scaler.fit_transform(df[year_columns])



year_columns = [str(year) for year in range(1965, 2024)]
for year in year_columns:
    df[year] = pd.to_numeric(df[year], errors='coerce')
df['Total Consumption'] = df[year_columns].sum(axis=1)
df['Average Consumption'] = df['Total Consumption'] / len(year_columns)

df['Median Consumption'] = df[year_columns].median(axis=1)

df_sorted = df.sort_values('Median Consumption', ascending=False)
plt.figure(figsize=(12, 6))
plt.bar(df_sorted['Country'], df_sorted['Median Consumption'])
plt.xlabel('Country')
plt.ylabel('Median Energy Consumption')
plt.title('Median Energy Consumption per Country (1965-2023)')
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()
# Sort the DataFrame by average consumption for better visualization
df_sorted = df.sort_values('Average Consumption', ascending=False)

plt.figure(figsize=(12, 6))  # Adjust figure size as needed
plt.bar(df_sorted['Country'], df_sorted['Average Consumption'])
plt.xlabel('Country')
plt.ylabel('Average Energy Consumption')
plt.title('Average Energy Consumption per Country (1965-2023)')
plt.xticks(rotation=90)  # Rotate x-axis labels for readability
plt.tight_layout()  # Adjust layout to prevent labels from overlapping
plt.show()

plt.figure(figsize=(8, 6))
plt.scatter(df['Total Consumption'], df['Average Consumption'])
plt.xlabel('Total Energy Consumption (1965-2023)')
plt.ylabel('Average Energy Consumption')
plt.title('Relationship between Total and Average Consumption')
plt.show()

top_5 = df.nlargest(6, 'Average Consumption')
plt.figure(figsize=(6, 6))
plt.pie(top_5['Average Consumption'], labels=top_5['Country'], autopct='%1.1f%%')
plt.title('Top 6  by Average Energy Consumption')
plt.show()

bottom_5 = df.nsmallest(5, 'Average Consumption')  # Get the 5 countries with lowest average consumption

plt.figure(figsize=(6, 6))
plt.pie(bottom_5['Average Consumption'], labels=bottom_5['Country'], autopct='%1.1f%%')
plt.title('Bottom 5 Countries by Average Energy Consumption')
plt.show()



import matplotlib.pyplot as plt
import matplotlib.cm as cm

plt.figure(figsize=(8, 6))


years = ['2019', '2020', '2021', '2022', '2023']
colors = cm.rainbow(np.linspace(0, 1, len(years)))  # Generate a range of colors

for i, year in enumerate(years):
    plt.scatter(df[year], df['2020'], color=colors[i], label=year)

plt.xlabel('Energy Consumption')
plt.ylabel('Energy Consumption in 2020')
plt.title('Energy Consumption vs Energy Consumption in 2020 (2019-2023)')
plt.legend()
plt.show()

import matplotlib.pyplot as plt
import matplotlib.cm as cm

plt.figure(figsize=(8, 6))


years = ['2017', '2018', '2019', '2020', '2021']
colors = cm.rainbow(np.linspace(0, 1, len(years)))  # Generate a range of colors

for i, year in enumerate(years):
    plt.scatter(df[year], df['2017'], color=colors[i], label=year)

plt.xlabel('Energy Consumption')
plt.ylabel('Energy Consumption in 2020')
plt.title('Energy Consumption vs Energy Consumption in 2020 (2017-2021)')
plt.legend()
plt.show()

import matplotlib.pyplot as plt

# Assuming 'df' is your DataFrame and '2020' is the column with energy consumption values for 2020
top_20 = df.nlargest(20, '2020')  # Select the top 20 countries based on 2020 consumption

plt.figure(figsize=(10, 6))
plt.bar(top_20['Country'], top_20['2020'])  # Create a bar chart with country on x-axis and 2020 consumption on y-axis
plt.xlabel('Country')
plt.ylabel('Energy Consumption in 2020')
plt.title('Top 20 Countries by Energy Consumption in 2020')
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt

plt.figure(figsize=(8, 6))
plt.scatter(df['2019'], df['2020'], s=df['Average Consumption'] * 10)  # Adjust scaling as needed
plt.xlabel('Energy Consumption in 2019')
plt.ylabel('Energy Consumption in 2020')
plt.title('Scatter Plot of Energy Consumption (Size by Average Consumption)')
plt.show()

import matplotlib.pyplot as plt

# Assuming 'top_20' is the DataFrame containing the top 20 countries from the previous histogram
# and it has columns '2018', '2019', '2020'

# Calculate average consumption for 2019-2020
top_20['Avg_Consumption_19_20'] = top_20[['2019', '2020']].mean(axis=1)

plt.figure(figsize=(8, 6))

plt.scatter(top_20['2019'], top_20['2020'], s=top_20['Avg_Consumption_19_20'] * 10, alpha=0.7)  # Adjust scaling as needed

plt.xlabel('Energy Consumption in 2019')
plt.ylabel('Energy Consumption in 2020')
plt.title('Scatter Plot of Top 20 Countries (Size by Average Consumption 2019-2020)')
plt.show()

import matplotlib.pyplot as plt

# Assuming 'top_20' is the DataFrame containing the top 20 countries
# and it has columns '2018', '2019'

# Calculate average consumption for 2018-2019
top_20['Avg_Consumption'] = top_20[['2018', '2019']].mean(axis=1)

plt.figure(figsize=(8, 6))

plt.scatter(top_20['Country'], top_20['2018'], s=top_20['Avg_Consumption'] * 10, alpha=0.5, label='2018', color='purple')
plt.scatter(top_20['Country'], top_20['2019'], s=top_20['Avg_Consumption'] * 10, alpha=0.5, label='2019', color='lightgreen')

plt.xlabel('Country')
plt.ylabel('Energy Consumption')
plt.title('Scatter Plot of Top 20 Countries (Size by Average Consumption 2018-2019)')
plt.xticks(rotation=90)
plt.legend()
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt

# Assuming 'top_20' is the DataFrame containing the top 20 countries
# and it has columns '2018', '2019'

# Calculate average consumption for 2018-2019
top_20['Avg_Consumption'] = top_20[['2019', '2020']].mean(axis=1)

plt.figure(figsize=(8, 6))

plt.scatter(top_20['Country'], top_20['2019'], s=top_20['Avg_Consumption'] * 10, alpha=0.5, label='2019', color='purple')
plt.scatter(top_20['Country'], top_20['2020'], s=top_20['Avg_Consumption'] * 10, alpha=0.5, label='2020', color='lightgreen')

plt.xlabel('Country')
plt.ylabel('Energy Consumption')
plt.title('Scatter Plot of Top 20 Countries (Size by Average Consumption 2019-2020)')
plt.xticks(rotation=90)
plt.legend()
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt

# Assuming 'top_20' is the DataFrame containing the top 20 countries
# and it has columns '2018', '2019'

# Calculate average consumption for 2018-2019
top_20['Avg_Consumption'] = top_20[['1965', '2023']].mean(axis=1)

plt.figure(figsize=(8, 6))

plt.scatter(top_20['Country'], top_20['1965'], s=top_20['Avg_Consumption'] * 10, alpha=0.5, label='1965', color='purple')
plt.scatter(top_20['Country'], top_20['2023'], s=top_20['Avg_Consumption'] * 10, alpha=0.5, label='2023', color='lightgreen')

plt.xlabel('Country')
plt.ylabel('Energy Consumption')
plt.title('Scatter Plot of Top 20 Countries (Size by Average Consumption 1965-2023)')
plt.xticks(rotation=90)
plt.legend()
plt.tight_layout()
plt.show()